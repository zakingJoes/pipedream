import tkinter
from tkinter import*  
import tkinter.messagebox
import customtkinter
from time import sleep
import pyfirmata
port= "COM7"




#root=Tk()

customtkinter.set_appearance_mode("System")    # Modes: "System" (standard), "Dark", "Light"
customtkinter.set_default_color_theme("dark-blue")  # Themes: "blue" (standard), "green", "dark-blue"


class App(customtkinter.CTk):
    pin=10
    board=pyfirmata.Arduino(port)

    board.digital[pin].mode=pyfirmata.SERVO

    WIDTH = 780
    HEIGHT = 520

    def _init_(self):
        super()._init_()
        def roatateservo(pin,angle):
            App.board.digital[pin].write(angle)
            sleep(0.015)

        self.title("Braccio Robot GUI.py")
        self.geometry(f"{App.WIDTH}x{App.HEIGHT}")
        self.protocol("WM_DELETE_WINDOW", self.on_closing)  # call .on_closing() when app gets closed

        # ============ create two frames ============

        # configure grid layout (2x1)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)

        self.frame_left = customtkinter.CTkFrame(master=self,
                                                 width=180,
                                                 corner_radius=0)
        self.frame_left.grid(row=0, column=0, sticky="nswe")

        self.frame_right = customtkinter.CTkFrame(master=self)
        self.frame_right.grid(row=0, column=1, sticky="nswe", padx=20, pady=20)

        # ============ frame_left ============

        # configure grid layout (1x11)
        self.frame_left.grid_rowconfigure(0, minsize=10)   # empty row with minsize as spacing
        self.frame_left.grid_rowconfigure(6, weight=1)  # empty row as spacing
        self.frame_left.grid_rowconfigure(7, minsize=20)    # empty row with minsize as spacing
        self.frame_left.grid_rowconfigure(11, minsize=10)  # empty row with minsize as spacing

        self.label_1 = customtkinter.CTkLabel(master=self.frame_left,
                                              text="Robot Arm Components",
                                              text_font=("Roboto Medium", 16))  # font name and size in px
        self.label_1.grid(row=1, column=0, pady=10, padx=10)


        self.button_1 = customtkinter.CTkButton(master=self.frame_left,
                                                text="Base Movement",
                                                command=self.button_event)
        self.button_1.grid(row=2, column=0, pady=10, padx=20)

        self.button_2 = customtkinter.CTkButton(master=self.frame_left,
                                                text="Arm 1",
                                                command=self.button_event)
        self.button_2.grid(row=3, column=0, pady=10, padx=20)

        self.button_3 = customtkinter.CTkButton(master=self.frame_left,
                                                text="Arm2",
                                                command=self.button_event)
        self.button_3.grid(row=4, column=0, pady=10, padx=20)
        
        self.button_4 = customtkinter.CTkButton(master=self.frame_left,
                                                text="Arm3",
                                                command=self.button_event)
        self.button_4.grid(row=5, column=0, pady=10, padx=20)

        self.label_mode = customtkinter.CTkLabel(master=self.frame_left, text="Appearance Mode:")
        self.label_mode.grid(row=9, column=0, pady=0, padx=20, sticky="w")

        self.optionmenu_1 = customtkinter.CTkOptionMenu(master=self.frame_left,
                                                        values=["Light", "Dark", "System"],
                                                        command=self.change_appearance_mode)
        self.optionmenu_1.grid(row=10, column=0, pady=10, padx=20, sticky="w")

        # ============ frame_right ============

        # configure grid layout (3x7)
        self.frame_right.rowconfigure((0, 1, 2, 3), weight=1)
        self.frame_right.rowconfigure(8, weight=10)
        self.frame_right.columnconfigure((0, 1), weight=1)
        self.frame_right.columnconfigure(2, weight=0)

        self.frame_info = customtkinter.CTkFrame(master=self.frame_right)
        self.frame_info.grid(row=0, column=0, columnspan=2, rowspan=4, pady=20, padx=20, sticky="nsew")

        # ============ frame_info ============

        # configure grid layout (1x1)
        self.frame_info.rowconfigure(0, weight=1)
        self.frame_info.columnconfigure(0, weight=1)

        self.label_info_1 = customtkinter.CTkLabel(master=self.frame_info,
                                                   text="Select degree by which the,\n" +
                                                        "robot arm/base should move"
                                                        ,
                                                   height=100,
                                                   fg_color=("white", "gray38"),  # <- custom tuple-color
                                                   justify=tkinter.LEFT)
        self.label_info_1.grid(column=0, row=0, sticky="nwe", padx=15, pady=15)

        self.progressbar = customtkinter.CTkProgressBar(master=self.frame_info)
        self.progressbar.grid(row=1, column=0, sticky="ew", padx=15, pady=15)

        # ============ frame_right ============

        self.radio_var = tkinter.IntVar(value=0)


        def select():  # angle_base
            sel = "Value = " + str(a.get())  
            label.config(text = sel)
            roatateservo(10,a.get())
            

        a = DoubleVar() 


        self.slider_1 = customtkinter.CTkSlider(master=self.frame_right, command=self.progressbar.set,
                                                
                                                from_=0, to=180,variable= a)
        self.slider_1.grid(row=4, column=0, columnspan=2, pady=10, padx=20, sticky="we")

        

        self.button_9= customtkinter.CTkButton(master=self.frame_right, text="Angle",command=select)  
        self.button_9.grid(row=4,column=2)
        #self.button_9 = customtkinter.CTkButton(master=self.frame_right,
                                                #text="ANGLE",
                                                #command=self.button_event)
        #self.button_9.grid(row=4, column=2, pady=10, padx=20)

        label = Label(master=self.frame_right)  
        label.grid(row=8,column=0)

        def select2():    # Angle1
            sel_2 = "Value = " + str(b.get())  
            label.config(text = sel_2)
            roatateservo(11,b.get())

        b = DoubleVar()


        self.slider_2 = customtkinter.CTkSlider(master=self.frame_right,
                                                command=self.progressbar.set,
                                                from_=0, to=180, variable=b)
        self.slider_2.grid(row=5, column=0, columnspan=2, pady=10, padx=20, sticky="we")

        self.button_8= customtkinter.CTkButton(master=self.frame_right, text="Angle",command=select2)  
        self.button_8.grid(row=5,column=2)

        label = Label(master=self.frame_right)  
        label.grid(row=8,column=0)

        def select3():  # Angle 3 
            sel3 = "Value = " + str(c.get())  
            label.config(text = sel3)
            roatateservo(12,a.get())

        c = DoubleVar()

        
        self.slider_3 = customtkinter.CTkSlider(master=self.frame_right,
                                                command=self.progressbar.set,
                                                from_=0, to=180, variable=c)
        self.slider_3.grid(row=6, column=0, columnspan=2, pady=10, padx=20, sticky="we")

        self.button_7= customtkinter.CTkButton(master=self.frame_right, text="Angle",command=select3)  
        self.button_7.grid(row=6,column=2)

        label = Label(master=self.frame_right)  
        label.grid(row=8,column=0)

        def select4():   # Angle 4
            sel4 = "Value = " + str(d.get())  
            label.config(text = sel4)

        d = DoubleVar()


        
        self.slider_4 = customtkinter.CTkSlider(master=self.frame_right,
                                                command=self.progressbar.set,
                                                from_=0, to=180,variable=d)
        self.slider_4.grid(row=7, column=0, columnspan=2, pady=10, padx=20, sticky="we")

        self.button_6= customtkinter.CTkButton(master=self.frame_right, text="Angle",command=select4)  
        self.button_6.grid(row=7,column=2)

        label = Label(master=self.frame_right)  
        label.grid(row=8,column=0)


        self.button_5 = customtkinter.CTkButton(master=self.frame_right,
                                                text="Exit",
                                                border_width=2,  # <- custom border_width
                                                fg_color=None,  # <- no fg_color
                                                command=self.quit)
        self.button_5.grid(row=9, column=2, columnspan=1, pady=20, padx=20, sticky="we")

        # set default values
        self.optionmenu_1.set("Dark")
        
    
        
        self.slider_1.set(0.2)
        self.slider_2.set(0.7)
        self.progressbar.set(0.5)
        
        
    
        

    def button_event(self):
        print("Button pressed")

    def change_appearance_mode(self, new_appearance_mode):
        customtkinter.set_appearance_mode(new_appearance_mode)

    def on_closing(self, event=0):
        self.destroy()


if _name_ == "_main_":
    app = App()
    #print(app)
    app.mainloop()
